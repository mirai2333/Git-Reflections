事件：
    是JavaScript侦测到的行为，网页中的每个元素都可以产生一些事件

常用：
    - onclick            鼠标单击事件
    - onload             网页导入
        网页加载完成后发生，写在body里面
    - onmouseover        鼠标经过事件
    - onmouseout         鼠标移出事件

非常用：
    - *onchange          文本框内容改变事件
    - onselect           文本框内容被选中事件
    - *onfocus           光标聚集
    - *onblur            光标离开
    - onunload           关闭网页
        顾名思义
        页面刷新时也会触发

JavaScript内置对象：
    属性、方法
    parseInt()
        字符串类型转换成整型

    new Array()
        arr.length
        arr.concat(array1,array2,....)
            链接数组，返回原数组进行链接之后的副本，不会改变原数组
        arr.join(分隔符)
            把数组用指定的分隔符连接在一起形成字符串，如果未指定，默认用逗号
        arr.reverse()
            颠倒数组的顺序，会改变数组本身
        arr.slice(start,end)
            从已有数组中返回指定元素
            start从0开始，若为负值则从后往前数
            不包含end所指的元素，如果end为负值也表示从后往前计数
            不会修改数组，会返回一个子数组
        arr.sort(方法函数)
            如果不指定方法函数，则按unicode码顺序排列
            方法函数要比较两个值，然后返回一个用于说明这两个值相对顺序的数字（从小到大）
                若返回值<=-1，表示A在B之前
                若返回值>-1&&<1，表示A和B顺序相同
                若返回值>1，表示A在B之后
            方法函数不带括号！！

    new Date()
        <时间对象>.getFullYear()
        <时间对象>.getDay()
            返回星期，用0~6表示，0表示星期日
        <时间对象>.get/setTime()
            获取或者设置时间，单位毫秒数

    var str
        str.length
        str.toUpperCase()
        str.toLowerCase()
        str.charAt(index)
            返回某一位置的字符，是长度为1的的字符串
        str.indexOf(substring,starpos)
            返回指定字符串substring的位置
            starpos表示开始检索的位置，可选参数
            如果有不止一个结果，就返回第一个位置
            没有结果返回-1
        str.split(separator,limit)
            separator表示按什么分割，如果按""这样的空字符分割，会把每个字符都分开
            limit表示分割的最大数组数
            返回值是一个数组，数组元素就是分割开的字符串
        str.substring(starPos,stopPos)
            starPos表示开始位置，从0开始，包括starPos的字符
            stopPos可选参数，不包括stopPos的字符
            如果两个参数相等会返回""空字符串
            如果starPos大于stopPos，会在一开始交换二者位置
        str.substr(starPos,length)
            starPos如果为负数则从后往前计数，-1表示最后一个字符，若为负数，且绝对值大于长度，那么starPos置为0

    Math
        Math.ceil()
            向上取整
        Math.floor()
            向下取整
        Math.round(x)
            取距离x最近的整数，两边相等时取大的
        Math.random()
            0~1的随机数

window对象：指当前的浏览器窗口

    setInterval(代码,交互时间);
        按“交互时间”间隔，执行“代码”
        交互时间按ms计，1s=1000ms
        返回值是一个可被clearInterval()接受，从而取消循环的值
    clearInterval(id_of_setInterval)
        id_of_setInterval，就是上面说的传过来的ID值

    setTimeout(代码,延迟时间)
        延迟一定时间后执行代码，时间按毫秒计
    clearTimeout(ID_OF_setTimeout)

    History对象：记录了用户曾经浏览过的页面（URL），可以实现浏览器前进与后退功能
        从窗口打开的那一刻开始记录，每个浏览器窗口，每个标签乃至每个框架都有自己的history对象与特定的window对象关联

        window.history.[属性|方法]
            windows可以省略
            length
                返回浏览器历史列表中的URL数量
            back()
                加载history列表中的前一个URL
                可以在<a></a>中用herf="JavaScript:back()"调用
            forward()
                加载history列表中的下一个URL
            go()
                加载history列表中的某个具体页面

    Location对象：获取或设置窗体的URL，并且可用于解析URL
    Navigator对象：包含有关浏览器的信息，通常用于检测浏览器与操作系统的版本
        navigator.userAgent
            返回用户代理头的字符串表示（就是包括浏览器版本信息等的字符串）
    screen对象：用于获取用户的屏幕信息
        window.screen.属性
            屏幕分辨率的宽高，单位以像素计
                screen.width
                screen.height
            访问者屏幕的宽高，以像素计，比如减去任务栏后的
                screen.availWidth
                screen.availHeight

DOM对象：
        document.getElementsByName(name)
            注意：Elements，s，s，s，s
            通过元素的name属性查询元素。
            因为name属性可能不唯一所以返回的是一个元素数组
            因而就有length属性，可以查询长度
            需要通过与数组类似的方式查询具体的元素
        document.getElementsByTagName(TagName)
            TagName肯定不是唯一的所以同上……
            还有：Elements，s，s，s，s
        document.createElement('Tagname')
            创建一个新元素
        document.createTextNode(data)
            创建一个文本节点

        elementNode.getAttribute(name)
            elementNode就是获取的HTML元素
            name是想要查询的元素的属性名字
        elementNode.setAttribute(name,value)
            如果不存在指定的属性，那么将创建一个新属性

        nodeName,nodeType,nodeValue
            是节点的三个重要属性

        elementNode.childNodes
            访问选定元素节点下的所有子节点列表，是一个数组
            如果没有子节点，返回不包含节点的NodeList
            IE不会设置空文本节点
            node.parentNode
                获取指定节点node的父节点
            node.firstChild
            node.lastChild
                node表示节点列表的父节点的元素，并不是列表数组！！！！！
                返回节点列表的第一个/最后一个子节点
                与elementNode.childNodes[0/最后一个]相同
                如果没有子节点，则返回null
            node.nextSibling
            node.previousSibling
                返回某个节点之后的或之前的节点，处于同一树层级中
                注意计算空节点
                若无节点则返回null
            node.appendChlid(newnode)
                newnode，应该是JavaScript内创建的HTML元素
            node.insertBefore(newnode,node)
                在指定node之前插入newnode
            node.removeChild(Chlidnode)
                node表示父节点，且用node.childNodes.length做for条件时，随着删除，这个长度会变化，第一个位置一直是有元素的！！！！！
                删除成功的话会返回被删除的节点
            node.replace(newnode,oldnode);
                把oldnode换为newnode，node为父节点


        对于IE9+、Chrome、Firefox、Opera 以及 Safari：

        •  window.innerHeight - 浏览器窗口的内部高度
        •  window.innerWidth - 浏览器窗口的内部宽度

        对于 Internet Explorer 8、7、6、5：

        •  document.documentElement.clientHeight表示HTML文档所在窗口的当前高度。
        •  document.documentElement.clientWidth表示HTML文档所在窗口的当前宽度。

        Document对象的body属性对应HTML文档的<body>标签
        •  document.body.clientHeight
        •  document.body.clientWidth

        在不同浏览器都实用的 JavaScript 方案：
        var w= document.documentElement.clientWidth
              || document.body.clientWidth;
        var h= document.documentElement.clientHeight
              || document.body.clientHeight;

        scrollHeight和scrollWidth，获取网页
        "内容"
        "内容"
        "内容"
        高度和宽度。

        offsetHeight = clientHeight + 滚动条 + 边框。